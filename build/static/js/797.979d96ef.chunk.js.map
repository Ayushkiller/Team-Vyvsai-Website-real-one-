{"version":3,"file":"static/js/797.979d96ef.chunk.js","mappings":"0KAGA,MA4FA,EA5FsBA,KACpB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,KAChDG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAAS,IAC7CK,GAAUC,EAAAA,EAAAA,MA8BhB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,UAClCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,6BAA4BC,UACzCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBC,SAAC,sBACjCC,EAAAA,EAAAA,MAAA,QAAMC,SAjCOC,UAEnB,GADAC,EAAEC,iBACEhB,IAAgBG,EAKpB,IACE,MAAMc,QAAiBC,MAAM,+BAAgC,CAC3DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEvB,cAAaG,sBAGtC,GAAKc,EAASO,GAIZjB,EAAQkB,KAAK,cAJG,CAChB,MAAMC,QAAaT,EAASU,OAC5BrB,EAAiBoB,EAAKE,OACxB,CAGF,CAAE,MAAOC,GACPC,QAAQD,MAAM,4BAA6BA,GAC3CvB,EAAiB,CAAC,CAAEyB,IAAK,yCAC3B,MAtBEzB,EAAiB,CAAC,CAAEyB,IAAK,2BAsB3B,EAQoCrB,UAAU,mBAAmBsB,YAAU,EAAArB,SAAA,EACnEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,SAAOwB,QAAQ,cAAcvB,UAAU,aAAYC,SAAC,mBAGpDF,EAAAA,EAAAA,KAAA,SACEyB,KAAK,WACLC,GAAG,cACHC,KAAK,cACL1B,UAAU,eACV2B,YAAY,qBACZC,MAAOtC,EACPuC,SAAWxB,GAAMd,EAAec,EAAEyB,OAAOF,OACzCG,UAAQ,IAETpC,EAAcqC,OAAS,IACtBjC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BC,SACtCN,EAAc,GAAG0B,UAKxBnB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,SAAOwB,QAAQ,kBAAkBvB,UAAU,aAAYC,SAAC,2BAGxDF,EAAAA,EAAAA,KAAA,SACEyB,KAAK,WACLC,GAAG,kBACHC,KAAK,kBACL1B,UAAU,eACV2B,YAAY,uBACZC,MAAOnC,EACPoC,SAAWxB,GAAMX,EAAmBW,EAAEyB,OAAOF,OAC7CG,UAAQ,IAETpC,EAAcqC,OAAS,IACtBjC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BC,SACtCN,EAAc,GAAG0B,UAKxBtB,EAAAA,EAAAA,KAAA,UAAQyB,KAAK,SAASxB,UAAU,wBAAuBC,SAAC,4BAM1D,C","sources":["components/Login/PasswordReset.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst PasswordReset = () => {\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errorMessages, setErrorMessages] = useState([]);\n  const history = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (newPassword !== confirmPassword) {\n      setErrorMessages([{ msg: \"Passwords do not match\" }]);\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/password-reset/new-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ newPassword, confirmPassword }),\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        setErrorMessages(data.errors);\n      } else {\n        history.push(\"/login\"); // Redirect to login page after successful password reset\n      }\n    } catch (error) {\n      console.error(\"Error resetting password:\", error);\n      setErrorMessages([{ msg: \"An error occurred. Please try again.\" }]);\n    }\n  };\n\n  return (\n    <div className=\"container mt-5 pt-4\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-6\">\n          <h1 className=\"text-center mb-4\">Set New Password</h1>\n          <form onSubmit={handleSubmit} className=\"needs-validation\" noValidate>\n            <div className=\"mb-3\">\n              <label htmlFor=\"newPassword\" className=\"form-label\">\n                New Password:\n              </label>\n              <input\n                type=\"password\"\n                id=\"newPassword\"\n                name=\"newPassword\"\n                className=\"form-control\"\n                placeholder=\"Enter new password\"\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                required\n              />\n              {errorMessages.length > 0 && (\n                <div className=\"invalid-feedback d-block\">\n                  {errorMessages[0].msg}\n                </div>\n              )}\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"confirmPassword\" className=\"form-label\">\n                Confirm New Password:\n              </label>\n              <input\n                type=\"password\"\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                className=\"form-control\"\n                placeholder=\"Confirm new password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n              />\n              {errorMessages.length > 0 && (\n                <div className=\"invalid-feedback d-block\">\n                  {errorMessages[0].msg}\n                </div>\n              )}\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary w-100\">\n              Reset Password\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PasswordReset;\n"],"names":["PasswordReset","newPassword","setNewPassword","useState","confirmPassword","setConfirmPassword","errorMessages","setErrorMessages","history","useNavigate","_jsx","className","children","_jsxs","onSubmit","async","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","push","data","json","errors","error","console","msg","noValidate","htmlFor","type","id","name","placeholder","value","onChange","target","required","length"],"sourceRoot":""}