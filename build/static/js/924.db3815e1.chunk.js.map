{"version":3,"file":"static/js/924.db3815e1.chunk.js","mappings":"0KAEA,MASA,EATiBA,UACf,IAEE,aADuBC,EAAAA,EAAMC,KAAK,sCAAuCC,IACzDC,IAClB,CAAE,MAAOC,GACP,MAAMA,CACR,G,aCHF,MAiHA,EAjHiBC,KACf,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACvCC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,YAAa,MAGRC,EAAQC,IAAaP,EAAAA,EAAAA,UAAS,CAAC,IAC/BQ,EAAcC,IAAmBT,EAAAA,EAAAA,WAAS,IAC1CU,EAAcC,IAAmBX,EAAAA,EAAAA,UAAS,CAAEJ,MAAO,GAAIgB,SAAS,IAEjEC,GAAeC,EAAAA,EAAAA,cAAY,KAC/B,MAAMC,EAAY,CAAC,GACb,SAAEd,EAAQ,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,EAAQ,YAAEC,GAAgBP,EAW7D,OATKG,EAASe,SAAQD,EAAUd,SAAW,wBACtCC,EAASc,OACJ,WAAWC,KAAKf,KAAWa,EAAUb,SAAW,0BADpCa,EAAUb,SAAW,6BAEtCC,EAAMa,OACD,eAAeC,KAAKd,KAAQY,EAAUZ,MAAQ,yBADrCY,EAAUZ,MAAQ,oBAEhCC,EAASY,OACLZ,EAASc,OAAS,IAAGH,EAAUX,SAAW,0CAD7BW,EAAUX,SAAW,uBAEtCC,IAAaU,EAAUV,YAAc,8BAEnCU,CAAS,GACf,CAACjB,IAEEqB,GAAeL,EAAAA,EAAAA,cAAaM,IAChC,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1BxB,GAAayB,IAAI,IAAWA,EAAM,CAACH,GAAOC,MAC1Cf,GAAWiB,IAAI,IAAWA,EAAM,CAACH,GAAO,MAAM,GAC7C,IAyBGI,EAAkB,SAACJ,EAAMK,GAAK,IAAEC,EAAIC,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,OAAM,OACjDE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOC,QAASb,EAAKW,SAAEN,KACvBO,EAAAA,EAAAA,KAAA,SACEE,GAAId,EACJA,KAAMA,EACNM,KAAMA,EACNL,MAAOxB,EAASuB,GAChBe,SAAUjB,EACV,eAAcb,EAAOe,GAAQ,OAAS,QACtC,mBAAkBf,EAAOe,GAAQ,GAAGA,eAAeQ,IAEpDvB,EAAOe,KAASY,EAAAA,EAAAA,KAAA,KAAGE,GAAI,GAAGd,UAAcU,UAAU,QAAOC,SAAE1B,EAAOe,OAC/D,EAGR,OACES,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJF,EAAAA,EAAAA,MAAA,QAAMO,SA1CW9C,UACnB6B,EAAEkB,iBACF,MAAMC,EAAa1B,IAEnB,GAAI2B,OAAOC,KAAKF,GAAYrB,OAAS,EACnCX,EAAUgC,OADZ,CAKA9B,GAAgB,GAChBE,EAAgB,CAAEf,MAAO,GAAIgB,SAAS,IAEtC,UACQ8B,EAAyB5C,GAC/Ba,EAAgB,CAAEf,MAAO,GAAIgB,SAAS,GACxC,CAAE,MAAOhB,GAAQ,IAAD+C,EAAAC,EACdC,QAAQjD,MAAM,yBAA0BA,GACxCe,EAAgB,CAAEf,OAAqB,QAAd+C,EAAA/C,EAAMkD,gBAAQ,IAAAH,GAAM,QAANC,EAAdD,EAAgBhD,YAAI,IAAAiD,OAAN,EAAdA,EAAsBG,UAAW,sBAAuBnC,SAAS,GAC5F,CAAC,QACCH,GAAgB,EAClB,CAbA,CAaA,EAsBgCuC,YAAU,EAAAhB,SAAA,CACrCP,EAAgB,WAAY,YAC5BA,EAAgB,WAAY,iBAAkB,OAC9CA,EAAgB,QAAS,QAAS,SAClCA,EAAgB,WAAY,WAAY,aAEzCK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,cAAaF,SAAC,8BAC7BF,EAAAA,EAAAA,MAAA,UACEK,GAAG,cACHd,KAAK,cACLC,MAAOxB,EAASO,YAChB+B,SAAUjB,EACV,eAAcb,EAAOD,YAAc,OAAS,QAC5C,mBAAkBC,EAAOD,YAAc,yBAAsBwB,EAAUG,SAAA,EAEvEC,EAAAA,EAAAA,KAAA,UAAQX,MAAM,GAAEU,SAAC,uBACjBC,EAAAA,EAAAA,KAAA,UAAQX,MAAM,qBAAoBU,SAAC,0BAEpC1B,EAAOD,cAAe4B,EAAAA,EAAAA,KAAA,KAAGE,GAAG,oBAAoBJ,UAAU,QAAOC,SAAE1B,EAAOD,iBAG5EK,EAAad,QAASqC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAACC,EAAAA,EAAAA,KAAA,KAAAD,SAAItB,EAAad,UACpEc,EAAaE,UAAWqB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAACC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gCAE3DC,EAAAA,EAAAA,KAAA,UAAQN,KAAK,SAASsB,SAAUzC,EAAawB,SAC1CxB,EAAe,iBAAmB,iBAGvCsB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,aAAYC,SAAA,CAAC,6BACCC,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,GAAG,SAAQnB,SAAC,oBAEzC,C","sources":["services/registerService.js","components/Login/Register.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst register = async (userData) => {\r\n  try {\r\n    const response = await axios.post('https://localhost:5000/api/register', userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default { register };","import React, { useState, useCallback } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport registerService from \"../../services/registerService\";\r\nimport \"./Register.css\";\r\n\r\nconst Register = () => {\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    mobileNo: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    preferences: \"\",\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [submitStatus, setSubmitStatus] = useState({ error: \"\", success: false });\r\n\r\n  const validateForm = useCallback(() => {\r\n    const newErrors = {};\r\n    const { username, mobileNo, email, password, preferences } = formData;\r\n\r\n    if (!username.trim()) newErrors.username = \"Username is required\";\r\n    if (!mobileNo.trim()) newErrors.mobileNo = \"Contact number is required\";\r\n    else if (!/^\\d{10}$/.test(mobileNo)) newErrors.mobileNo = \"Invalid contact number\";\r\n    if (!email.trim()) newErrors.email = \"Email is required\";\r\n    else if (!/\\S+@\\S+\\.\\S+/.test(email)) newErrors.email = \"Invalid email address\";\r\n    if (!password.trim()) newErrors.password = \"Password is required\";\r\n    else if (password.length < 8) newErrors.password = \"Password must be at least 8 characters\";\r\n    if (!preferences) newErrors.preferences = \"Please select a preference\";\r\n\r\n    return newErrors;\r\n  }, [formData]);\r\n\r\n  const handleChange = useCallback((e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n    setErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n  }, []);\r\n  \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const formErrors = validateForm();\r\n\r\n    if (Object.keys(formErrors).length > 0) {\r\n      setErrors(formErrors);\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    setSubmitStatus({ error: \"\", success: false });\r\n\r\n    try {\r\n      await registerService.register(formData);\r\n      setSubmitStatus({ error: \"\", success: true });\r\n    } catch (error) {\r\n      console.error('Error submitting data:', error);\r\n      setSubmitStatus({ error: error.response?.data?.message || 'Registration failed', success: false });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const renderFormField = (name, label, type = \"text\") => (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        id={name}\r\n        name={name}\r\n        type={type}\r\n        value={formData[name]}\r\n        onChange={handleChange}\r\n        aria-invalid={errors[name] ? \"true\" : \"false\"}\r\n        aria-describedby={errors[name] ? `${name}-error` : undefined}\r\n      />\r\n      {errors[name] && <p id={`${name}-error`} className=\"error\">{errors[name]}</p>}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"register-container\">\r\n      <h1>Register</h1>\r\n      <form onSubmit={handleSubmit} noValidate>\r\n        {renderFormField(\"username\", \"Username\")}\r\n        {renderFormField(\"mobileNo\", \"Contact Number\", \"tel\")}\r\n        {renderFormField(\"email\", \"Email\", \"email\")}\r\n        {renderFormField(\"password\", \"Password\", \"password\")}\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"preferences\">Notification Preferences</label>\r\n          <select\r\n            id=\"preferences\"\r\n            name=\"preferences\"\r\n            value={formData.preferences}\r\n            onChange={handleChange}\r\n            aria-invalid={errors.preferences ? \"true\" : \"false\"}\r\n            aria-describedby={errors.preferences ? \"preferences-error\" : undefined}\r\n          >\r\n            <option value=\"\">Select preference</option>\r\n            <option value=\"government-tenders\">Government Tenders</option>\r\n          </select>\r\n          {errors.preferences && <p id=\"preferences-error\" className=\"error\">{errors.preferences}</p>}\r\n        </div>\r\n\r\n        {submitStatus.error && <div className=\"alert error\"><p>{submitStatus.error}</p></div>}\r\n        {submitStatus.success && <div className=\"alert success\"><p>Registration successful!</p></div>}\r\n\r\n        <button type=\"submit\" disabled={isSubmitting}>\r\n          {isSubmitting ? \"Registering...\" : \"Register\"}\r\n        </button>\r\n      </form>\r\n      <p className=\"login-link\">\r\n        Already have an account? <Link to=\"/login\">Login here</Link>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;"],"names":["async","axios","post","userData","data","error","Register","formData","setFormData","useState","username","mobileNo","email","password","preferences","errors","setErrors","isSubmitting","setIsSubmitting","submitStatus","setSubmitStatus","success","validateForm","useCallback","newErrors","trim","test","length","handleChange","e","name","value","target","prev","renderFormField","label","type","arguments","undefined","_jsxs","className","children","_jsx","htmlFor","id","onChange","onSubmit","preventDefault","formErrors","Object","keys","registerService","_error$response","_error$response$data","console","response","message","noValidate","disabled","Link","to"],"sourceRoot":""}