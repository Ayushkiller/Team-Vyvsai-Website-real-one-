{"ast":null,"code":"const http = require('http');\nconst {\n  MongoClient\n} = require('mongodb');\nconst url = require('url');\nconst mongoUrl = 'mongodb://localhost:27017';\nconst dbName = 'Registered';\nconst server = http.createServer(async (req, res) => {\n  const parsedUrl = url.parse(req.url, true);\n  if (req.method === 'POST' && parsedUrl.pathname === '/api/register') {\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n    req.on('end', async () => {\n      try {\n        const user = JSON.parse(body);\n        const client = new MongoClient(mongoUrl, {\n          useUnifiedTopology: true\n        });\n        await client.connect();\n        const db = client.db(dbName);\n        const result = await db.collection('users').insertOne(user);\n        client.close();\n        res.writeHead(201, {\n          'Content-Type': 'application/json'\n        });\n        res.end(JSON.stringify({\n          message: 'User registered successfully',\n          id: result.insertedId\n        }));\n      } catch (error) {\n        console.error('Registration error:', error);\n        res.writeHead(500, {\n          'Content-Type': 'application/json'\n        });\n        res.end(JSON.stringify({\n          message: 'Error registering user'\n        }));\n      }\n    });\n  } else {\n    res.writeHead(404, {\n      'Content-Type': 'application/json'\n    });\n    res.end(JSON.stringify({\n      message: 'Not Found'\n    }));\n  }\n});\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["http","require","MongoClient","url","mongoUrl","dbName","server","createServer","req","res","parsedUrl","parse","method","pathname","body","on","chunk","toString","user","JSON","client","useUnifiedTopology","connect","db","result","collection","insertOne","close","writeHead","end","stringify","message","id","insertedId","error","console","PORT","process","env","listen","log"],"sources":["E:/Team-Vyvsai-Website-real-one-/vyvsai-website/src/Database/connect.js"],"sourcesContent":["const http = require('http');\nconst { MongoClient } = require('mongodb');\nconst url = require('url');\n\nconst mongoUrl = 'mongodb://localhost:27017';\nconst dbName = 'Registered';\n\nconst server = http.createServer(async (req, res) => {\n  const parsedUrl = url.parse(req.url, true);\n  \n  if (req.method === 'POST' && parsedUrl.pathname === '/api/register') {\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n    \n    req.on('end', async () => {\n      try {\n        const user = JSON.parse(body);\n        const client = new MongoClient(mongoUrl, { useUnifiedTopology: true });\n        \n        await client.connect();\n        const db = client.db(dbName);\n        const result = await db.collection('users').insertOne(user);\n        \n        client.close();\n        \n        res.writeHead(201, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({ message: 'User registered successfully', id: result.insertedId }));\n      } catch (error) {\n        console.error('Registration error:', error);\n        res.writeHead(500, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({ message: 'Error registering user' }));\n      }\n    });\n  } else {\n    res.writeHead(404, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify({ message: 'Not Found' }));\n  }\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC1C,MAAME,GAAG,GAAGF,OAAO,CAAC,KAAK,CAAC;AAE1B,MAAMG,QAAQ,GAAG,2BAA2B;AAC5C,MAAMC,MAAM,GAAG,YAAY;AAE3B,MAAMC,MAAM,GAAGN,IAAI,CAACO,YAAY,CAAC,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnD,MAAMC,SAAS,GAAGP,GAAG,CAACQ,KAAK,CAACH,GAAG,CAACL,GAAG,EAAE,IAAI,CAAC;EAE1C,IAAIK,GAAG,CAACI,MAAM,KAAK,MAAM,IAAIF,SAAS,CAACG,QAAQ,KAAK,eAAe,EAAE;IACnE,IAAIC,IAAI,GAAG,EAAE;IACbN,GAAG,CAACO,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAI;MACtBF,IAAI,IAAIE,KAAK,CAACC,QAAQ,CAAC,CAAC;IAC1B,CAAC,CAAC;IAEFT,GAAG,CAACO,EAAE,CAAC,KAAK,EAAE,YAAY;MACxB,IAAI;QACF,MAAMG,IAAI,GAAGC,IAAI,CAACR,KAAK,CAACG,IAAI,CAAC;QAC7B,MAAMM,MAAM,GAAG,IAAIlB,WAAW,CAACE,QAAQ,EAAE;UAAEiB,kBAAkB,EAAE;QAAK,CAAC,CAAC;QAEtE,MAAMD,MAAM,CAACE,OAAO,CAAC,CAAC;QACtB,MAAMC,EAAE,GAAGH,MAAM,CAACG,EAAE,CAAClB,MAAM,CAAC;QAC5B,MAAMmB,MAAM,GAAG,MAAMD,EAAE,CAACE,UAAU,CAAC,OAAO,CAAC,CAACC,SAAS,CAACR,IAAI,CAAC;QAE3DE,MAAM,CAACO,KAAK,CAAC,CAAC;QAEdlB,GAAG,CAACmB,SAAS,CAAC,GAAG,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC,CAAC;QAC1DnB,GAAG,CAACoB,GAAG,CAACV,IAAI,CAACW,SAAS,CAAC;UAAEC,OAAO,EAAE,8BAA8B;UAAEC,EAAE,EAAER,MAAM,CAACS;QAAW,CAAC,CAAC,CAAC;MAC7F,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3CzB,GAAG,CAACmB,SAAS,CAAC,GAAG,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC,CAAC;QAC1DnB,GAAG,CAACoB,GAAG,CAACV,IAAI,CAACW,SAAS,CAAC;UAAEC,OAAO,EAAE;QAAyB,CAAC,CAAC,CAAC;MAChE;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACLtB,GAAG,CAACmB,SAAS,CAAC,GAAG,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC,CAAC;IAC1DnB,GAAG,CAACoB,GAAG,CAACV,IAAI,CAACW,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAY,CAAC,CAAC,CAAC;EACnD;AACF,CAAC,CAAC;AAEF,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrC9B,MAAM,CAACiC,MAAM,CAACH,IAAI,EAAE,MAAM;EACxBD,OAAO,CAACK,GAAG,CAAC,0BAA0BJ,IAAI,EAAE,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}